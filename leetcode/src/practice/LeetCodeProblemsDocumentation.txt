1679. Max Number of K-Sum Pairs
--------------------------------

    There are a few ways to handle this problem

    If time-complexity isn't an issue, you can use a nested loop

    But, if you want your algorithm to be more optimal, we can make use of the Hash Map data structure 

    This is the Hash Map data structure two pass technique 

    *** It's important to know that in this problem, we can only use an element once as a pair ***

    The reason we call it two pass
    -------------------------------

        - The first loop through the arg array
            - we store the elements of the array as keys in the hashmap we created
            - we store the occurance of said element as the value in the same hashmap 

        - The second loop through the arg array
            - we create a complement variable that equals (t - array[i])
                - this holds the value that we need to search to see if it exists in the hashmap. If we find that value, we know that target has been found
            - assuming the target value and the current value have been found in the map that leads us to two scenarios
                1. nums[i] == complement 
                    - still equals target so count++
                    - if two values in the array are the same number AND the sum of each equals target, then we need 2 counts or more of that number to 
                2. else 
                    - count++
                    - remove 1 count from current and compliment key's value


    Two Pointers
    --------------

The much easier and simpler way to do this is to use the two pointer technique

This technique only works for this problem if the array is sorted.
    - To sort the array, simply use the sort() method from the Arrays class

We have a left and a right pointer that point at the beginning and the end index of the array respectively

We do 3 checks. These 3 checks manipulate our window.

1. If the sum of the two indexes equal to the target
    - True: increase the count, move left up one and right down one (This is because an element can only be used once)

2. If the sum of the two indexes is less than the target 
    - True: It's sorted and we need a bigger number, move to the next biggest number in the array by moving the left window up one

3. If the sum of the two indexes is more than the target
    - True: It's sorted and we a need a smaller number, move to the next smalles number in the array by moving the right window down one

Then return count :)

Target:
6

Original: 
3, 1, 3, 4, 3

Sorted:
1, 3, 3, 3, 4



L           R
1, 3, 3, 3, 4 = < t

   L        R
1, 3, 3, 3, 4 = > t

   L     R
1, 3, 3, 3, 4 = = t so count++; left++;right--;
    
     LR
1, 3, 3, 3, 4 = break


392. Is Subsequence
--------------------

We have two pointers both starting on the first index of their respective strings

Create a while loop that loops that loops one pointer through one string's length and another pointer through the other string's length

We do ? checks ot manipulate our window

1. if the character s1 of i equals the character at s2 of i 
    - True: left++;
    - Else: right++;

2. return is the length of s1, the prefix, the same as left pointer
    - this basically says we only move the left side of the window if there is a match ahead. So if there is left should equal the same amount of characters as the length of s1

----------------
String s:
L
a b c

String t:
R
a h b g d c

----------------
String s:
  L
a b c

String t:
  R
a h b g d c
----------------

String s:
  L
a b c

String t:
    R
a h b g d c
----------------

String s:
    L
a b c

String t:
      R
a h b g d c
----------------

String s:
    L
a b c

String t:
        R
a h b g d c
----------------

String s:
    L
a b c

String t:
          R
a h b g d c
----------------

1679. Max Number of K-Sum Pairs
--------------------------------